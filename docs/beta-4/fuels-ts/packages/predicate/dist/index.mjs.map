{"version":3,"sources":["../src/predicate.ts","../src/utils/getPredicateRoot.ts"],"sourcesContent":["import type { JsonAbi, InputValue } from '@fuel-ts/abi-coder';\nimport {\n  Interface,\n  INPUT_COIN_FIXED_SIZE,\n  WORD_SIZE,\n  calculateVmTxMemory,\n  SCRIPT_FIXED_SIZE,\n} from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport { BaseAssetId } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { AbstractAddress, AbstractPredicate, BytesLike } from '@fuel-ts/interfaces';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport type {\n  CallResult,\n  Provider,\n  TransactionRequest,\n  TransactionRequestLike,\n  TransactionResponse,\n} from '@fuel-ts/providers';\nimport { transactionRequestify, BaseTransactionRequest } from '@fuel-ts/providers';\nimport { ByteArrayCoder, InputType } from '@fuel-ts/transactions';\nimport type { TxParamsType } from '@fuel-ts/wallet';\nimport { Account } from '@fuel-ts/wallet';\nimport { getBytesCopy, hexlify } from 'ethers';\n\nimport { getPredicateRoot } from './utils';\n\n/**\n * `Predicate` provides methods to populate transaction data with predicate information and sending transactions with them.\n */\nexport class Predicate<ARGS extends InputValue[]> extends Account implements AbstractPredicate {\n  bytes: Uint8Array;\n  predicateData: Uint8Array = Uint8Array.from([]);\n  predicateArgs: ARGS = [] as unknown as ARGS;\n  interface?: Interface;\n\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param provider - The provider used to interact with the blockchain.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   */\n  constructor(\n    bytes: BytesLike,\n    provider: Provider,\n    jsonAbi?: JsonAbi,\n    configurableConstants?: { [name: string]: unknown }\n  ) {\n    const { predicateBytes, predicateInterface } = Predicate.processPredicateData(\n      bytes,\n      jsonAbi,\n      configurableConstants\n    );\n    const address = Address.fromB256(getPredicateRoot(predicateBytes));\n    super(address, provider);\n\n    this.bytes = predicateBytes;\n    this.interface = predicateInterface;\n  }\n\n  /**\n   * Populates the transaction data with predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns The transaction request with predicate data.\n   */\n  populateTransactionPredicateData(transactionRequestLike: TransactionRequestLike) {\n    const request = transactionRequestify(transactionRequestLike);\n\n    const { policies } = BaseTransactionRequest.getPolicyMeta(request);\n\n    request.inputs?.forEach((input) => {\n      if (input.type === InputType.Coin && hexlify(input.owner) === this.address.toB256()) {\n        // eslint-disable-next-line no-param-reassign\n        input.predicate = this.bytes;\n        // eslint-disable-next-line no-param-reassign\n        input.predicateData = this.getPredicateData(policies.length);\n      }\n    });\n\n    return request;\n  }\n\n  /**\n   * A helper that creates a transfer transaction request and returns it.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer.\n   * @param txParams - The transaction parameters (gasLimit, gasPrice, maturity).\n   * @returns A promise that resolves to the prepared transaction request.\n   */\n  async createTransfer(\n    /** Address of the destination */\n    destination: AbstractAddress,\n    /** Amount of coins */\n    amount: BigNumberish,\n    /** Asset ID of coins */\n    assetId: BytesLike = BaseAssetId,\n    /** Tx Params */\n    txParams: TxParamsType = {}\n  ): Promise<TransactionRequest> {\n    const request = await super.createTransfer(destination, amount, assetId, txParams);\n    return this.populateTransactionPredicateData(request);\n  }\n\n  /**\n   * Sends a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the transaction response.\n   */\n  sendTransaction(transactionRequestLike: TransactionRequestLike): Promise<TransactionResponse> {\n    const transactionRequest = this.populateTransactionPredicateData(transactionRequestLike);\n    return super.sendTransaction(transactionRequest);\n  }\n\n  /**\n   * Simulates a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the call result.\n   */\n  simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult> {\n    const transactionRequest = this.populateTransactionPredicateData(transactionRequestLike);\n    return super.simulateTransaction(transactionRequest);\n  }\n\n  /**\n   * Sets data for the predicate.\n   *\n   * @param args - Arguments for the predicate function.\n   * @returns The Predicate instance with updated predicate data.\n   */\n  setData<T extends ARGS>(...args: T) {\n    this.predicateArgs = args;\n\n    return this;\n  }\n\n  private getPredicateData(policiesLength: number): Uint8Array {\n    if (!this.predicateArgs.length) {\n      return new Uint8Array();\n    }\n\n    const mainFn = this.interface?.functions.main;\n    const paddedCode = new ByteArrayCoder(this.bytes.length).encode(this.bytes);\n\n    const VM_TX_MEMORY = calculateVmTxMemory({\n      maxInputs: this.provider.getChain().consensusParameters.maxInputs.toNumber(),\n    });\n    const OFFSET =\n      VM_TX_MEMORY +\n      SCRIPT_FIXED_SIZE +\n      INPUT_COIN_FIXED_SIZE +\n      WORD_SIZE +\n      paddedCode.byteLength +\n      policiesLength * WORD_SIZE;\n\n    return mainFn?.encodeArguments(this.predicateArgs, OFFSET) || new Uint8Array();\n  }\n\n  /**\n   * Processes the predicate data and returns the altered bytecode and interface.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   * @returns An object containing the new predicate bytes and interface.\n   */\n  private static processPredicateData(\n    bytes: BytesLike,\n    jsonAbi?: JsonAbi,\n    configurableConstants?: { [name: string]: unknown }\n  ) {\n    let predicateBytes = getBytesCopy(bytes);\n    let abiInterface: Interface | undefined;\n\n    if (jsonAbi) {\n      abiInterface = new Interface(jsonAbi);\n      if (abiInterface.functions.main === undefined) {\n        throw new FuelError(\n          ErrorCode.ABI_MAIN_METHOD_MISSING,\n          'Cannot use ABI without \"main\" function.'\n        );\n      }\n    }\n\n    if (configurableConstants && Object.keys(configurableConstants).length) {\n      predicateBytes = Predicate.setConfigurableConstants(\n        predicateBytes,\n        configurableConstants,\n        abiInterface\n      );\n    }\n\n    return {\n      predicateBytes,\n      predicateInterface: abiInterface,\n    };\n  }\n\n  /**\n   * Sets the configurable constants for the predicate.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param configurableConstants - Configurable constants to be set.\n   * @param abiInterface - The ABI interface of the predicate.\n   * @returns The mutated bytes with the configurable constants set.\n   */\n  private static setConfigurableConstants(\n    bytes: Uint8Array,\n    configurableConstants: { [name: string]: unknown },\n    abiInterface?: Interface\n  ) {\n    const mutatedBytes = bytes;\n\n    try {\n      if (!abiInterface) {\n        throw new Error(\n          'Cannot validate configurable constants because the Predicate was instantiated without a JSON ABI'\n        );\n      }\n\n      if (Object.keys(abiInterface.configurables).length === 0) {\n        throw new Error('Predicate has no configurable constants to be set');\n      }\n\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!abiInterface?.configurables[key]) {\n          throw new Error(`No configurable constant named '${key}' found in the Predicate`);\n        }\n\n        const { offset } = abiInterface.configurables[key];\n\n        const encoded = abiInterface.encodeConfigurable(key, value as InputValue);\n\n        mutatedBytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new FuelError(\n        ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${(<Error>err).message}.`\n      );\n    }\n\n    return mutatedBytes;\n  }\n}\n","import { hash } from '@fuel-ts/hasher';\nimport { calcRoot } from '@fuel-ts/merkle';\nimport { chunkAndPadBytes } from '@fuel-ts/utils';\nimport { hexlify, concat, getBytesCopy } from 'ethers';\nimport type { BytesLike } from 'ethers';\n\n/**\n * @hidden\n *\n * Calculates the predicate root for a given bytecode and chain ID.\n *\n * @param bytecode - The bytecode represented as a BytesLike object.\n * @param chainId - The ID of the chain associated with the bytecode.\n * @returns The predicate root as a string.\n */\nexport const getPredicateRoot = (bytecode: BytesLike): string => {\n  const chunkSize = 16 * 1024;\n  const bytes = getBytesCopy(bytecode);\n  const chunks = chunkAndPadBytes(bytes, chunkSize);\n  const codeRoot = calcRoot(chunks.map((c) => hexlify(c)));\n\n  const predicateRoot = hash(concat(['0x4655454C', codeRoot]));\n  return predicateRoot;\n};\n"],"mappings":"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","names":["getBytesCopy","hexlify","hexlify","getBytesCopy"]}
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.73.0
  Forc version: 0.49.2
  Fuel-Core version: 0.22.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export enum ErrorInput { InvalidBytecodeRoot = 'InvalidBytecodeRoot', HasNotCompletedLevel = 'HasNotCompletedLevel' };
export enum ErrorOutput { InvalidBytecodeRoot = 'InvalidBytecodeRoot', HasNotCompletedLevel = 'HasNotCompletedLevel' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialized = 'CannotReinitialized' };
export enum InitializationErrorOutput { CannotReinitialized = 'CannotReinitialized' };
export type StateInput = Enum<{ Uninitialized: [], Initialized: IdentityInput, Revoked: [] }>;
export type StateOutput = Enum<{ Uninitialized: [], Initialized: IdentityOutput, Revoked: [] }>;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };
export type OwnershipTransferredInput = { new_owner: IdentityInput, previous_owner: IdentityInput };
export type OwnershipTransferredOutput = { new_owner: IdentityOutput, previous_owner: IdentityOutput };

interface FuelnautAbiInterface extends Interface {
  functions: {
    complete_instance: FunctionFragment;
    create_instance: FunctionFragment;
    create_instance_with_configurables: FunctionFragment;
    get_all_levels_status: FunctionFragment;
    get_bytecode_root: FunctionFragment;
    get_instance_contract: FunctionFragment;
    get_level: FunctionFragment;
    get_total_number_of_levels: FunctionFragment;
    my_constructor: FunctionFragment;
    owner: FunctionFragment;
    register_level: FunctionFragment;
    test_instance_with_configurables: FunctionFragment;
    transfer_contract_ownership: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'complete_instance', values: [AddressInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'create_instance', values: [ContractIdInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'create_instance_with_configurables', values: [ContractIdInput, BigNumberish, Vec<BigNumberish>, Vec<[BigNumberish, Vec<BigNumberish>]>]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_all_levels_status', values: [AddressInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_bytecode_root', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_instance_contract', values: [AddressInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_level', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_total_number_of_levels', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'my_constructor', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'owner', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'register_level', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'test_instance_with_configurables', values: [Vec<[BigNumberish, Vec<BigNumberish>]>]): Uint8Array;
  encodeFunctionData(functionFragment: 'transfer_contract_ownership', values: [IdentityInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'complete_instance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'create_instance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'create_instance_with_configurables', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_all_levels_status', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_bytecode_root', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_instance_contract', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_level', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_total_number_of_levels', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'my_constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'owner', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'register_level', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'test_instance_with_configurables', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer_contract_ownership', data: BytesLike): DecodedValue;
}

export class FuelnautAbi extends Contract {
  interface: FuelnautAbiInterface;
  functions: {
    complete_instance: InvokeFunction<[address: AddressInput, level_id: BigNumberish], void>;
    create_instance: InvokeFunction<[instance: ContractIdInput, level_id: BigNumberish], void>;
    create_instance_with_configurables: InvokeFunction<[instance: ContractIdInput, level_id: BigNumberish, bytecode_input: Vec<BigNumberish>, configurables: Vec<[BigNumberish, Vec<BigNumberish>]>], void>;
    get_all_levels_status: InvokeFunction<[address: AddressInput], Vec<Option<boolean>>>;
    get_bytecode_root: InvokeFunction<[id: ContractIdInput], string>;
    get_instance_contract: InvokeFunction<[address: AddressInput, instance_id: BigNumberish], [ContractIdOutput, boolean]>;
    get_level: InvokeFunction<[index: BigNumberish], string>;
    get_total_number_of_levels: InvokeFunction<[], BN>;
    my_constructor: InvokeFunction<[], void>;
    owner: InvokeFunction<[], StateOutput>;
    register_level: InvokeFunction<[bytecode_root: string], BN>;
    test_instance_with_configurables: InvokeFunction<[configurables: Vec<[BigNumberish, Vec<BigNumberish>]>], void>;
    transfer_contract_ownership: InvokeFunction<[new_owner: IdentityInput], void>;
  };
}
